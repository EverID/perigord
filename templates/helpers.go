// Copyright Â© 2017 Swarm Market <info@swarm.market>
// Based on autogenerated code from go-bindata
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package templates

import (
	"bytes"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

func ExecuteTemplate(path, name string, data interface{}) error {
	asset, err := Asset(name)
	if err != nil {
		return err
	}

	info, err := AssetInfo(name)
	if err != nil {
		return err
	}

	err = os.MkdirAll(filepath.Dir(path), os.FileMode(0755))
	if err != nil {
		return err
	}

	tpl, err := template.New("").Parse(string(asset))
	if err != nil {
		return err
	}

	buf := new(bytes.Buffer)
	err = tpl.Execute(buf, data)
	if err != nil {
		return err
	}

	err = ioutil.WriteFile(path, buf.Bytes(), info.Mode())
	if err != nil {
		return err
	}

	return nil
}

func ExecuteTemplates(dir, name, prefix string, data interface{}) error {
	filename := strings.TrimPrefix(name, prefix)
	children, err := AssetDir(name)

	if err != nil {
		return ExecuteTemplate(filepath.Join(dir, filename), name, data)
	}

	for _, child := range children {
		err = ExecuteTemplates(dir, filepath.Join(name, child), prefix, data)
		if err != nil {
			return err
		}
	}

	return nil
}
